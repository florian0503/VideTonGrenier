<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Controller/AnnonceController.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Controller/AnnonceController.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Controller;&#10;&#10;use App\Entity\Annonce;&#10;use App\Entity\Categorie;&#10;use App\Repository\AnnonceRepository;&#10;use App\Repository\CategorieRepository;&#10;use Doctrine\ORM\EntityManagerInterface;&#10;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;&#10;use Symfony\Component\HttpFoundation\Request;&#10;use Symfony\Component\HttpFoundation\Response;&#10;use Symfony\Component\Routing\Attribute\Route;&#10;use Symfony\Component\Security\Http\Attribute\IsGranted;&#10;&#10;#[Route('/annonces')]&#10;final class AnnonceController extends AbstractController&#10;{&#10;    #[Route('/', name: 'app_annonce_index', methods: ['GET'])]&#10;    public function index(AnnonceRepository $annonceRepository, CategorieRepository $categorieRepository, Request $request): Response&#10;    {&#10;        $categories = $categorieRepository-&gt;findBy(['isActive' =&gt; true]);&#10;        $categoryFilter = $request-&gt;query-&gt;get('categorie');&#10;        $search = $request-&gt;query-&gt;get('q');&#10;&#10;        $queryBuilder = $annonceRepository-&gt;createQueryBuilder('a')&#10;            -&gt;where('a.status = :status')&#10;            -&gt;setParameter('status', Annonce::STATUS_PUBLISHED)&#10;            -&gt;orderBy('a.publishedAt', 'DESC');&#10;&#10;        if ($categoryFilter) {&#10;            $queryBuilder-&gt;andWhere('a.categorie = :categorie')&#10;                -&gt;setParameter('categorie', $categoryFilter);&#10;        }&#10;&#10;        if ($search) {&#10;            $queryBuilder-&gt;andWhere('a.titre LIKE :search OR a.description LIKE :search')&#10;                -&gt;setParameter('search', '%' . $search . '%');&#10;        }&#10;&#10;        $annonces = $queryBuilder-&gt;getQuery()-&gt;getResult();&#10;&#10;        return $this-&gt;render('annonce/index.html.twig', [&#10;            'annonces' =&gt; $annonces,&#10;            'categories' =&gt; $categories,&#10;            'current_category' =&gt; $categoryFilter,&#10;            'search' =&gt; $search,&#10;        ]);&#10;    }&#10;&#10;    #[Route('/{id}', name: 'app_annonce_show', methods: ['GET'])]&#10;    public function show(Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Incrémenter les vues&#10;        $annonce-&gt;incrementVues();&#10;        $entityManager-&gt;flush();&#10;&#10;        return $this-&gt;render('annonce/show.html.twig', [&#10;            'annonce' =&gt; $annonce,&#10;        ]);&#10;    }&#10;&#10;    #[Route('/{id}/modifier', name: 'app_annonce_edit', methods: ['GET', 'POST'])]&#10;    #[IsGranted('ROLE_USER')]&#10;    public function edit(Request $request, Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Vérifier que l'utilisateur est le propriétaire&#10;        if ($annonce-&gt;getUser() !== $this-&gt;getUser()) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez modifier que vos propres annonces.');&#10;        }&#10;&#10;        // Rediriger vers le wizard pour l'édition&#10;        $this-&gt;addFlash('info', 'L\'édition via le wizard sera bientôt disponible. Utilisez le formulaire simple pour le moment.');&#10;&#10;        return $this-&gt;redirectToRoute('app_annonce_show', ['id' =&gt; $annonce-&gt;getId()]);&#10;    }&#10;&#10;&#10;    #[Route('/{id}/supprimer', name: 'app_annonce_delete', methods: ['POST'])]&#10;    #[IsGranted('ROLE_USER')]&#10;    public function delete(Request $request, Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Vérifier que l'utilisateur est le propriétaire&#10;        if ($annonce-&gt;getUser() !== $this-&gt;getUser()) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez supprimer que vos propres annonces.');&#10;        }&#10;&#10;        if ($this-&gt;isCsrfTokenValid('delete'.$annonce-&gt;getId(), $request-&gt;getPayload()-&gt;getString('_token'))) {&#10;            $entityManager-&gt;remove($annonce);&#10;            $entityManager-&gt;flush();&#10;            &#10;            $this-&gt;addFlash('success', 'Votre annonce a été supprimée avec succès !');&#10;        }&#10;&#10;        return $this-&gt;redirectToRoute('app_annonce_index');&#10;    }&#10;&#10;    #[Route('/{id}/marquer-vendue', name: 'app_annonce_mark_sold', methods: ['POST'])]&#10;    #[IsGranted('ROLE_USER')]&#10;    public function markSold(Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Vérifier que l'utilisateur est le propriétaire&#10;        if ($annonce-&gt;getUser() !== $this-&gt;getUser()) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez marquer comme vendue que vos propres annonces.');&#10;        }&#10;&#10;        // Marquer comme vendue seulement si elle est publiée&#10;        if ($annonce-&gt;isPublished()) {&#10;            $annonce-&gt;setStatus(Annonce::STATUS_SOLD);&#10;            $entityManager-&gt;flush();&#10;            &#10;            $this-&gt;addFlash('success', sprintf('L\'annonce &quot;%s&quot; a été marquée comme vendue !', $annonce-&gt;getTitre()));&#10;        } else {&#10;            $this-&gt;addFlash('error', 'Seules les annonces publiées peuvent être marquées comme vendues.');&#10;        }&#10;&#10;        return $this-&gt;redirectToRoute('app_user_annonces');&#10;    }&#10;}" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Controller;&#10;&#10;use App\Entity\Annonce;&#10;use App\Entity\Categorie;&#10;use App\Repository\AnnonceRepository;&#10;use App\Repository\CategorieRepository;&#10;use Doctrine\ORM\EntityManagerInterface;&#10;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;&#10;use Symfony\Component\HttpFoundation\Request;&#10;use Symfony\Component\HttpFoundation\Response;&#10;use Symfony\Component\Routing\Attribute\Route;&#10;use Symfony\Component\Security\Http\Attribute\IsGranted;&#10;&#10;#[Route('/annonces')]&#10;final class AnnonceController extends AbstractController&#10;{&#10;    #[Route('/', name: 'app_annonce_index', methods: ['GET'])]&#10;    public function index(AnnonceRepository $annonceRepository, CategorieRepository $categorieRepository, Request $request): Response&#10;    {&#10;        $categories = $categorieRepository-&gt;findBy(['isActive' =&gt; true]);&#10;        $categoryFilter = $request-&gt;query-&gt;get('categorie');&#10;        $search = $request-&gt;query-&gt;get('q');&#10;&#10;        $queryBuilder = $annonceRepository-&gt;createQueryBuilder('a')&#10;            -&gt;where('a.status = :status')&#10;            -&gt;setParameter('status', Annonce::STATUS_PUBLISHED)&#10;            -&gt;orderBy('a.publishedAt', 'DESC');&#10;&#10;        if ($categoryFilter) {&#10;            $queryBuilder-&gt;andWhere('a.categorie = :categorie')&#10;                -&gt;setParameter('categorie', $categoryFilter);&#10;        }&#10;&#10;        if ($search) {&#10;            $queryBuilder-&gt;andWhere('a.titre LIKE :search OR a.description LIKE :search')&#10;                -&gt;setParameter('search', '%' . $search . '%');&#10;        }&#10;&#10;        $annonces = $queryBuilder-&gt;getQuery()-&gt;getResult();&#10;&#10;        return $this-&gt;render('annonce/index.html.twig', [&#10;            'annonces' =&gt; $annonces,&#10;            'categories' =&gt; $categories,&#10;            'current_category' =&gt; $categoryFilter,&#10;            'search' =&gt; $search,&#10;        ]);&#10;    }&#10;&#10;    #[Route('/{id}', name: 'app_annonce_show', methods: ['GET'])]&#10;    public function show(Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Incrémenter les vues&#10;        $annonce-&gt;incrementVues();&#10;        $entityManager-&gt;flush();&#10;&#10;        return $this-&gt;render('annonce/show.html.twig', [&#10;            'annonce' =&gt; $annonce,&#10;        ]);&#10;    }&#10;&#10;    #[Route('/{id}/modifier', name: 'app_annonce_edit', methods: ['GET', 'POST'])]&#10;    #[IsGranted('ROLE_USER')]&#10;    public function edit(Request $request, Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Vérifier que l'utilisateur est le propriétaire&#10;        if ($annonce-&gt;getUser() !== $this-&gt;getUser()) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez modifier que vos propres annonces.');&#10;        }&#10;&#10;        // Rediriger vers le wizard pour l'édition&#10;        $this-&gt;addFlash('info', 'L\'édition via le wizard sera bientôt disponible. Utilisez le formulaire simple pour le moment.');&#10;&#10;        return $this-&gt;redirectToRoute('app_annonce_show', ['id' =&gt; $annonce-&gt;getId()]);&#10;    }&#10;&#10;&#10;    #[Route('/{id}/supprimer', name: 'app_annonce_delete', methods: ['POST'])]&#10;    #[IsGranted('ROLE_USER')]&#10;    public function delete(Request $request, Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Vérifier que l'utilisateur est le propriétaire&#10;        if ($annonce-&gt;getUser() !== $this-&gt;getUser()) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez supprimer que vos propres annonces.');&#10;        }&#10;&#10;        if ($this-&gt;isCsrfTokenValid('delete'.$annonce-&gt;getId(), $request-&gt;getPayload()-&gt;getString('_token'))) {&#10;            $entityManager-&gt;remove($annonce);&#10;            $entityManager-&gt;flush();&#10;            &#10;            $this-&gt;addFlash('success', 'Votre annonce a été supprimée avec succès !');&#10;        }&#10;&#10;        return $this-&gt;redirectToRoute('app_annonce_index');&#10;    }&#10;&#10;    #[Route('/{id}/marquer-vendue', name: 'app_annonce_mark_sold', methods: ['POST'])]&#10;    #[IsGranted('ROLE_USER')]&#10;    public function markSold(Annonce $annonce, EntityManagerInterface $entityManager): Response&#10;    {&#10;        // Vérifier que l'utilisateur est le propriétaire&#10;        if ($annonce-&gt;getUser() !== $this-&gt;getUser()) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez marquer comme vendue que vos propres annonces.');&#10;        }&#10;&#10;        // Marquer comme vendue seulement si elle est publiée&#10;        if ($annonce-&gt;isPublished()) {&#10;            $annonce-&gt;setStatus(Annonce::STATUS_SOLD);&#10;            $entityManager-&gt;flush();&#10;            &#10;            $this-&gt;addFlash('success', sprintf('L\'annonce &quot;%s&quot; a été marquée comme vendue !', $annonce-&gt;getTitre()));&#10;        } else {&#10;            $this-&gt;addFlash('error', 'Seules les annonces publiées peuvent être marquées comme vendues.');&#10;        }&#10;&#10;        return $this-&gt;redirectToRoute('app_user_annonces');&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>